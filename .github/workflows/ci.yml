# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci

on:
  push:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: simple_bank
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432


    steps:

      - name: Set up Go version 1.22
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Check out code into the Go module repository
        uses: actions/checkout@v4

      - name: Install golang-migrate binary
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.11.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/migrate
          which migrate

      - name: Run db migration
        run: make migrateup

      - name: Test
        run: go test -v -coverprofile=coverage.out ./...

      - name: check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        continue-on-error: true # Should fail after coverage comment is posted
        with:
          profile: coverage.out
          threshold-file: 50
          threshold-package: 50
          threshold-total: 50

        # Post coverage report as comment (in 3 steps)
      - name: find pull request ID
        run: |
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ github.ref_name }}&state=open")
          PR_ID=$(echo "$PR_DATA" | jq -r '.[0].number')

          if [ "$PR_ID" != "null" ]; then
          echo "pull_request_id=$PR_ID" >> $GITHUB_ENV
          else
          echo "No open pull request found for this branch."
          fi
      - name: find if coverage report is already present
        if: env.pull_request_id
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ env.pull_request_id }}
          comment-author: 'github-actions[bot]'
          body-includes: 'go-test-coverage report:'
      - name: post coverage report
        if: env.pull_request_id
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ env.pull_request_id }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: |
            go-test-coverage report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }} ```

      - name: "finally check coverage"
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1
